buildscript {
	ext {
		springBootVersion = '1.5.8.RELEASE'
        restassuredVersion = '3.0.5'
        hamcrestVersion = '1.3'
        camelVersion = '2.20.0'
	}
	repositories {
		mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "gradle.plugin.com.boxfuse.client:flyway-release:4.2.0"
    }
}

apply plugin: 'groovy'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'org.springframework.boot'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

// use the particular versino of spring data related dependencies
dependencyManagement {
    imports {
        mavenBom('org.springframework.cloud:spring-cloud-dependencies:Brixton.SR4')
    }
}


dependencies {
	compile(
        'org.springframework.boot:spring-boot-starter',
        'org.springframework.boot:spring-boot-starter-jersey',
        'org.springframework.boot:spring-boot-starter-data-jpa',
        'org.apache.openjpa:openjpa-persistence-jdbc:2.4.1',
        'org.codehaus.groovy:groovy-json',
        'org.codehaus.groovy:groovy',
        'org.springframework.boot:spring-boot-devtools',
        "org.apache.camel:camel-spring-boot-starter:${camelVersion}",
        "org.apache.camel:camel-jsonpath:${camelVersion}"
    )

    runtime(
        'org.postgresql:postgresql:9.4.1211',
        'org.flywaydb:flyway-core:4.0.3'
    )

	testCompile(
        'org.springframework.boot:spring-boot-starter-test',
        "io.rest-assured:rest-assured:${restassuredVersion}",
        "org.hamcrest:hamcrest-core:${hamcrestVersion}"
    )
}

// save the generate jar file in the devops/app folder so that it can be copied over to the docker container
project.buildDir = 'devops/app'

test {

    //logging
    testLogging {
        // set options for log level LIFECYCLE
        events "failed"
        exceptionFormat "short"
        showStandardStreams = false

        // set options for log level DEBUG
        lifecycle {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
        }

        // remove standard output/error logging from --info builds
        // by assigning only 'failed' and 'skipped' events
        info.events = ["passed","failed", "skipped"]
    }
}

task openJPAEnhance() {
    description 'Enhance JPA model classes using OpenJPA Enhancer'

    doLast {
        // define the entity classes
        def entityFiles = fileTree(sourceSets.main.output.classesDir).matching {
            include 'com/example/javastatefulk8s/model/*.class'
        }

        println "Enhancing with OpenJPA, the following files..."
        entityFiles.getFiles().each {
            println it
        }

        // define Ant task for Enhancer
        ant.taskdef(
            name: 'openjpac',
            classpath: sourceSets.main.runtimeClasspath.asPath,
            classname: 'org.apache.openjpa.ant.PCEnhancerTask'
        )

        // Run the OpenJPA Enhancer as an Ant task
        //   - see OpenJPA 'PCEnhancerTask' for supported arguments
        //   - this invocation of the enhancer adds support for a default-ctor
        //   - as well as ensuring JPA property use is valid.
        ant.openjpac(
            classpath: sourceSets.main.runtimeClasspath.asPath,
            addDefaultConstructor: true,
            enforcePropertyRestrictions: true) {
            entityFiles.addToAntBuilder(ant, 'fileset', FileCollection.AntType.FileSet)
        }
    }
}

findMainClass.dependsOn openJPAEnhance
test.dependsOn openJPAEnhance
//integrationTest.dependsOn openJPAEnhance